Убрать (Инженер-программист II, Web-разработка) Тестирование
Убрать (Инженер-программист II, Языки программирования и алгоритмы) Написание тестов
Убрать (Инженер-программист II, Архитектура) Построение тестируемых архитектур

Добавить (Младший инженер-программист II, JavaScript) Тестирование (ур. 1). Написание тестов для простейших javascript функций-утилит.
Добавить (Инженер-программист I, Web-разработка) Тестирование (ур. 2). Написание тестов, включающих в себя runtime браузера или его эмуляцию. Использование тестовых заглушек и верификация взаимодействия с ними.
Добавить (Инженер-программист II, Web-разработка) Тестирование (ур. 3). Написание полноценных визуальных тестов, эмуляция пользователя при взаимодействии с интерфейсом.
Добавить (Старший инженер-программист, Архитектура) Тестирование (ур. 4). Построение тестируемых архитектур, знания их основных свойств. Способность организации процесса тестирования в целях оптимизации процесса труда и более стабильного развития приложения.

Убрать (Ведущий инженер-программист, Языки программирования и алгоритмы) Функциональный ЯП
Убрать (Инженер-программист II, Языки программирования и алгоритмы) Эффективная работа с алгебраическими типами

Добавить (Младший инженер-программист II, Языки программирования и алгоритмы) Паттерны ФП (ур. 1). Понимание различия декларативности и императивности. Знание основных свойств чистых функций и следствий из них.
Добавить (Инженер-программист I, Языки программирования и алгоритмы) Паттерны ФП (ур. 2). Понимание термина "композиция", его преимуществ и недостатков. Применение разных видов композиций на практике: currying, high order function и так далее.
Добавить (Инженер-программист II, Языки программирования и алгоритмы) Паттерны ФП (ур. 3). Понимание и осознанное использование functor, monad и monoid (на уровне кода). Способность реализации большей части сложных поведений с использованием данных элементов функционального программирования.
Добавить (Старший инженер-программист, Языки программирования и алгоритмы) Паттерны ФП (ур. 4). Реализация собственных функциональных структур и операций над ними (map, flatMap, натуральные трансформации, traversing операции и другие). Способность непротиворечивого, не избыточного описания логики и свойств разрабатываемой системы с помощью типов и их трансформаций (ADT).
Добавить (Ведущий инженер-программист, Языки программирования и алгоритмы) Паттерны ФП (ур. 5). Понимание и применение теоретической части (теории категорий) стоящей за правилами функциональной парадигмы. Понимание основных законов используемых в парадигме структур.

Убрать (Старший инженер-программист, JavaScript) Cross Tab Communication
Убрать (Старший инженер-программист, JavaScript) Cross Worker
Добавить (Старший инженер-программист, JavaScript) Построение средств коммуникации между разделенными процессами. Разделенными, значит не имеющими общего memory heap (разные потоки, разные вкладки в браузере, разные приложения и так далее).
Добавить (Старший инженер-программист, JavaScript) Потоки. Реализация алгоритмов основанных на использованиях отдельных потоков для своих вычислений.